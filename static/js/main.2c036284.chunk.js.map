{"version":3,"sources":["utils/FilterParams.ts","components/TodoTask/TodoTask.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/ErrorMessage/ErrorMessage.tsx","components/TodoModal/TodoModal.tsx","App.tsx","utils/filterTodos.ts","index.tsx"],"names":["FilterParams","TodoTask","todo","onToggleModal","selectedTodo","className","id","completed","classNames","title","type","onClick","userId","TodoList","todos","selectUser","selectTodo","handleToggleModal","todoId","map","TodoFilter","filterParam","onFilterChange","onSearch","onReset","defaultValue","select","onChange","Object","values","value","placeholder","query","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","ok","json","text","error","Error","ErrorMessage","errorMessage","TodoModal","onHide","useState","isLoading","setIsLoading","user","setUser","setErrorMessage","useEffect","getUser","catch","finally","href","email","name","App","setTodos","All","setFilterParam","setUserId","setSelectedTodo","filteredTodos","useMemo","filter","visibleTodos","normalaziedQuery","toLowerCase","includes","Active","Completed","filterTodos","event","prev","target","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c036284.chunk.js","sourcesContent":["export enum FilterParams {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  onToggleModal: (\n    userId: number,\n    todoId: number,\n    status: boolean,\n  ) => void,\n  selectedTodo: Todo | null,\n};\n\nexport const TodoTask: React.FC<Props> = ({\n  todo,\n  onToggleModal,\n  selectedTodo,\n}) => {\n  return (\n    <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => onToggleModal(todo.userId, todo.id, true)}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far', {\n              'fa-eye': selectedTodo?.id !== todo.id,\n              'fa-eye-slash': selectedTodo?.id === todo.id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoTask } from '../TodoTask';\n\ntype Props = {\n  todos: Todo[] | null,\n  selectedTodo: Todo | null,\n  selectUser: (userId: number) => void,\n  selectTodo: (todoId: number) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  selectUser,\n  selectTodo,\n}) => {\n  const handleToggleModal = (\n    userId: number,\n    todoId: number,\n  ) => {\n    selectUser(userId);\n    selectTodo(todoId);\n  };\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos?.map(todo => (\n          <TodoTask\n            todo={todo}\n            onToggleModal={handleToggleModal}\n            selectedTodo={selectedTodo}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterParams } from '../../utils/FilterParams';\nimport { Filters } from '../../types/Filters';\n\ntype Props = {\n  filterParam: Filters,\n  onFilterChange: (event: React.ChangeEvent<HTMLSelectElement>) => void,\n  onSearch: (event: React.ChangeEvent<HTMLInputElement>) => void,\n  onReset: () => void,\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  filterParam,\n  onFilterChange,\n  onSearch,\n  onReset,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            defaultValue={filterParam.select}\n            onChange={onFilterChange}\n            className=\"is-capitalized\"\n          >\n            {(Object.values(FilterParams))\n              .map((value) => (\n                <option\n                  value={value}\n                  key={value}\n                  className=\"is-capitalized\"\n                >\n                  {value}\n                </option>\n              ))}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filterParam.query}\n          onChange={onSearch}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n        {filterParam.query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onReset}\n              aria-label=\"clearSearchButton\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => {\n      if (!res.ok) {\n        return res.text().then(error => {\n          throw new Error(error);\n        });\n      }\n\n      return res.json();\n    });\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","type Props = {\n  errorMessage: string,\n};\n\nexport const ErrorMessage: React.FC<Props> = ({ errorMessage }) => {\n  return (\n    <article className=\"message is-danger\">\n      <div className=\"message-body\">\n        {errorMessage}\n      </div>\n    </article>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\nimport { ErrorMessage } from '../ErrorMessage/ErrorMessage';\n\ntype Props = {\n  userId: number,\n  todo: Todo | null\n  onHide: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  userId,\n  todo,\n  onHide,\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [user, setUser] = useState<User | null>(null);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    setIsLoading(true);\n    getUser(userId)\n      .then(setUser)\n      .catch(setErrorMessage)\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <>\n          {errorMessage ? (\n            <ErrorMessage errorMessage={errorMessage} />\n          ) : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${todo?.id}`}\n                </div>\n\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={onHide}\n                  aria-label=\"modal-close\"\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {todo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {todo?.completed ? (\n                    <strong className=\"has-text-success\">Done</strong>\n                  ) : (\n                    <strong className=\"has-text-danger\">Planned</strong>\n                  )}\n\n                  {' by '}\n\n                  <a href={`mailto:${user?.email}`}>\n                    {user?.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  ChangeEvent,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { Filters } from './types/Filters';\nimport { filterTodos } from './utils/filterTodos';\nimport { FilterParams } from './utils/FilterParams';\nimport { ErrorMessage } from './components/ErrorMessage/ErrorMessage';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [filterParam, setFilterParam] = useState<Filters>({\n    select: FilterParams.All,\n    query: '',\n  });\n\n  const [userId, setUserId] = useState(0);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getTodos()\n      .then(setTodos)\n      .catch(() => setErrorMessage('Invalid request URL'))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const changeFilterParam = (event: ChangeEvent<HTMLSelectElement>) => {\n    setFilterParam((prev) => ({ ...prev, select: event.target.value as FilterParams }));\n  };\n\n  const filteredTodos = useMemo(() => (\n    filterTodos(filterParam, todos)\n  ), [filterParam, todos]);\n\n  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFilterParam((prev) => ({ ...prev, query: event.target.value }));\n  };\n\n  const resetQuery = () => {\n    setFilterParam((prev) => ({ ...prev, query: '' }));\n  };\n\n  const selectUser = (id: number) => {\n    setUserId(id);\n  };\n\n  const selectTodo = (todoId: number) => {\n    setSelectedTodo(todos?.find(({ id }) => id === todoId) || null);\n  };\n\n  const hideModal = () => {\n    setSelectedTodo(null);\n    setUserId(0);\n  };\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filterParam={filterParam}\n                onFilterChange={changeFilterParam}\n                onSearch={handleSearch}\n                onReset={resetQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={filteredTodos}\n                  selectedTodo={selectedTodo}\n                  selectTodo={selectTodo}\n                  selectUser={selectUser}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          userId={userId}\n          onHide={hideModal}\n        />\n      )}\n      {errorMessage && (\n        <ErrorMessage errorMessage={errorMessage} />\n      )}\n    </>\n  );\n};\n","import { Filters } from '../types/Filters';\nimport { Todo } from '../types/Todo';\nimport { FilterParams } from './FilterParams';\n\nexport const filterTodos = (filter: Filters, todos: Todo[]) => {\n  const { select, query } = filter;\n  let visibleTodos = [...todos];\n  const normalaziedQuery = query.toLowerCase();\n\n  if (query) {\n    visibleTodos = visibleTodos.filter(({ title }) => (\n      title.toLowerCase().includes(normalaziedQuery)));\n  }\n\n  switch (select) {\n    case FilterParams.Active:\n      visibleTodos = visibleTodos.filter(({ completed }) => !completed);\n      break;\n\n    case FilterParams.Completed:\n      visibleTodos = visibleTodos.filter(({ completed }) => completed);\n      break;\n\n    default:\n      break;\n  }\n\n  return visibleTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}